package com.sdase.malwarescanner.strategy.impl;

import com.sdase.malwarescanner.config.Constants;
import com.sdase.malwarescanner.entity.Check;
import com.sdase.malwarescanner.entity.File;
import com.sdase.malwarescanner.model.CheckResultEvent;
import com.sdase.malwarescanner.model.ScanResult;
import com.sdase.malwarescanner.repository.IFileSearch;
import com.sdase.malwarescanner.service.CheckService;
import com.sdase.malwarescanner.service.FileProducerService;
import com.sdase.malwarescanner.service.FileService;
import com.sdase.malwarescanner.strategy.CheckResultEventStrategy;
import com.sdase.malwarescanner.strategy.ExaminationCheckProcess;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

import static com.sdase.malwarescanner.util.CheckTracker.isCheckRate;
import static com.sdase.malwarescanner.util.UUIDUtil.extractCode;

@Component
public class OkStrategy implements CheckResultEventStrategy, ExaminationCheckProcess {

    protected CheckService checkService;

    private FileService fileService;

    private FileProducerService fileProducerService;

    private static final Logger logger = LoggerFactory.getLogger(OkStrategy.class);

    public OkStrategy(CheckService checkService, FileService fileService, FileProducerService fileProducerService) {
        this.checkService = checkService;
        this.fileService = fileService;
        this.fileProducerService = fileProducerService;
    }

    @Override
    public void handle(CheckResultEvent checkResultEvent) {

        File file = fileService.getByCode(extractCode(checkResultEvent.getDetails()));

        Check check = checkService.getByNameAndFile(checkResultEvent.getName(), file);
        updateCheck(check);

        if (isCheckRate())
            examineCheckProcess();
    }

    @Override
    public void examineCheckProcess() {

        List<IFileSearch> allByFileStateAndCheckState = fileService.getAllByFileStateAndCheckState(File.State.CHECKING, Check.State.OK);
        allByFileStateAndCheckState.addAll(fileService.getAllByFileStateAndCheckState(File.State.CHECKING, Check.State.IGNORED));

        List<File> files = new ArrayList<>();

        for (IFileSearch f : allByFileStateAndCheckState) {

            if (isAllCheckLevelProceed(f.getCheckCount())) {

                File file = map(f);
                file.setState(File.State.OK);
                files.add(file);

                sendMessage(file);
            }
        }

        logger.info(files.size() + " Files found which are safe");

        updateFile(files);
    }

    @Override
    public void updateCheck(Check check) {
        check.setState(Check.State.OK);
        checkService.addOrEdit(check);
    }

    @Override
    public void updateFile(List<File> files) {
        fileService.addOrEdit(files);
    }

    @Override
    public void sendMessage(File file) {
        ScanResult scanResult = new ScanResult().
                setResult(String.format("File: %s is safe.", file.getOriginalName())).
                setState(ScanResult.State.OK).
                setUrl(fileService.getFileURLForConsuming(file.getName()));
        fileProducerService.produce(scanResult);
    }

    @Override
    public CheckResultEventStrategyFactory.StrategyName getStrategyName() {
        return CheckResultEventStrategyFactory.StrategyName.OK_STRATEGY;
    }


    private boolean isAllCheckLevelProceed(Integer proceedLevelCount) {
        return proceedLevelCount == Constants.CHECKING_COUNT;
    }


    private File map(IFileSearch iFileSearch) {
        File file = new File();

        file.setId(iFileSearch.getId());
        file.setCode(iFileSearch.getCode());
        file.setSha256(iFileSearch.getSha256());
        file.setName(iFileSearch.getName());
        file.setOriginalName(iFileSearch.getOriginalName());
        file.setFileType(iFileSearch.getFileType());
        return file;
    }
}
