package com.sdase.malwarescanner.exception;

import com.sdase.malwarescanner.web.model.ExceptionModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.support.DefaultMessageSourceResolvable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@ControllerAdvice
public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler {

    @Value(value = "${support.team.contact.onfo}")
    private String supportTeamContactInfo;

    @ExceptionHandler(value = {Exception.class})
    protected ResponseEntity<?> handleConflict(RuntimeException ex, WebRequest request) {
        String message =
                "500 Internal Server Error Oh no! Something bad happened. Please come back later when we fixed that problem or you can contact with support team %s. Thanks.";
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ExceptionModel(LocalDateTime.now(), String.format(message, supportTeamContactInfo)));
    }

    // error handle for @Valid
    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", new Date());
        body.put("status", status.value());

        //Get all errors
        List<String> errors = ex.getBindingResult().getFieldErrors().stream().
                map(DefaultMessageSourceResolvable::getDefaultMessage).collect(Collectors.toList());

        body.put("errors", errors);

        return new ResponseEntity<>(body, headers, status);
    }


}