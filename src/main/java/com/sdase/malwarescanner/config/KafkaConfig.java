package com.sdase.malwarescanner.config;

import com.sdase.malwarescanner.model.CheckEvent;
import com.sdase.malwarescanner.model.CheckResultEvent;
import com.sdase.malwarescanner.model.ScanResult;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.*;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.Map;


@Configuration
public class KafkaConfig {

    @Value(value = "${kafka.bootstrap.address}")
    private String kafkaBootstrapAddress;

    @Value(value = "${kafka.group.id}")
    private String kafkaGroupId;



//  <!--=================================== -->
//  <!-- CheckEvent Producer Factory  -->
//  <!--=================================== -->
    @Bean
    public ProducerFactory<String, CheckEvent> checkEventProducerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, CheckEvent> checkEventKafkaTemplate() {
        return new KafkaTemplate<>(checkEventProducerFactory());
    }




//  <!--=================================== -->
//  <!-- ScanResult Producer Factory  -->
//  <!--=================================== -->
    @Bean
    public ProducerFactory<String, ScanResult> scanResultProducerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, ScanResult> scanResultKafkaTemplate() {
        return new KafkaTemplate<>(scanResultProducerFactory());
    }




//  <!--=================================== -->
//  <!-- CheckResultEvent Consumer Factory  -->
//  <!--=================================== -->
    @Bean
    public ConsumerFactory<String, CheckResultEvent> checkResultEventConsumerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBootstrapAddress);
        config.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaGroupId);
        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
        return new DefaultKafkaConsumerFactory<>(config, new StringDeserializer(),
                new JsonDeserializer<>(CheckResultEvent.class,false));
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, CheckResultEvent> checkResultEventKafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, CheckResultEvent> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(checkResultEventConsumerFactory());
        return factory;
    }

}
