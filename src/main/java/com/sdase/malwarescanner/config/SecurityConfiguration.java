package com.sdase.malwarescanner.config;


import com.sdase.malwarescanner.filter.CustomAuthenticationFilter;
import com.sdase.malwarescanner.filter.JwtAuthenticationFilter;
import com.sdase.malwarescanner.service.impl.UserDetailServiceImpl;
import com.sdase.malwarescanner.util.TokenProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import static com.sdase.malwarescanner.config.Constants.*;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter
{

    private UserDetailServiceImpl userDetailService;
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    private TokenProvider tokenProvider;

    public SecurityConfiguration(UserDetailServiceImpl userDetailService, BCryptPasswordEncoder bCryptPasswordEncoder, TokenProvider tokenProvider) {
        this.userDetailService = userDetailService;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
        this.tokenProvider = tokenProvider;
    }


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailService).passwordEncoder(bCryptPasswordEncoder);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.cors().and().csrf().disable();
        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        http.authorizeRequests().antMatchers(REGISTER_REST_SIGN_UP_ABSOLUTE_PATH, LOGIN_REST_SIGN_IN_ABSOLUTE_PATH).permitAll();
        http.authorizeRequests().antMatchers("/h2-console/**").permitAll();
        http.authorizeRequests().antMatchers(USER_REST_ALL_SUB_ABSOLUTE_PATH).hasAnyAuthority(ROLE_ADMIN);
        http.authorizeRequests().antMatchers(FILE_REST_CONSUMER_UPLOAD_ABSOLUTE_PATH).hasAnyAuthority(ROLE_ADMIN,ROLE_CONSUMER);
        http.authorizeRequests().antMatchers(FILE_REST_CONSUMER_DOWNLOAD_ABSOLUTE_PATH).hasAnyAuthority(ROLE_ADMIN,ROLE_CONSUMER);
        http.authorizeRequests().antMatchers(FILE_REST_CHECK_DOWNLOAD_ABSOLUTE_PATH).hasAnyAuthority(ROLE_ADMIN,ROLE_CHECKER);

        // for h2-console
        http.headers().frameOptions().disable();

        http.authorizeRequests().anyRequest().authenticated();

        CustomAuthenticationFilter customAuthenticationFilter = new CustomAuthenticationFilter(authenticationManagerBean(), tokenProvider);
        customAuthenticationFilter.setFilterProcessesUrl(LOGIN_REST_SIGN_IN_ABSOLUTE_PATH);
        http.addFilter(customAuthenticationFilter);

        http.addFilterBefore(authenticationTokenFilterBean(), UsernamePasswordAuthenticationFilter.class);
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }


    @Bean
    public JwtAuthenticationFilter authenticationTokenFilterBean() throws Exception {
        return new JwtAuthenticationFilter(userDetailService, tokenProvider);
    }
}
